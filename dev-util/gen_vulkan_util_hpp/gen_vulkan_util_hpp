#!/usr/bin/env ruby

# This file is part of Crypt Underworld.
# 
# Crypt Underworld is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later
# version.
# 
# Crypt Underworld is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with Crypt Underworld. If not, see
# <https://www.gnu.org/licenses/>.
# 
# Copyright (c) 2022 ZoÃ« Sparks <zoe@milky.flowers>

require_relative 'lib'

require 'optparse'

# Increases to the fractional part signify changes that don't affect the
# generated header.
#
# Increases to the whole part signify changes that alter the generated header.
Version = "1.0"

opt = OptionParser.new

DEFAULT_VK_XML_PATH = '/usr/share/vulkan/registry/vk.xml'

vk_xml_path =  DEFAULT_VK_XML_PATH

opt.on(
  '-x', '--vk-xml VK_XML',
  "path to vk.xml (without this flag, #{DEFAULT_VK_XML_PATH} is used)"
) {|path| vk_xml_path = path }

DEFAULT_HEADER_PATH = '../../include/vulkan_util.hpp'

$write_path = ''

opt.on(
  '-w', '--write [PATH]',
  "write the generated header to a file (#{DEFAULT_HEADER_PATH} without PATH)"
) do |path|
  if path
    $write_path = path
  else
    $write_path = DEFAULT_HEADER_PATH
  end
end

$stdout_out = false

opt.on(
  '-o', '--out', "write the generated header to stdout"
) { $stdout_out = _1}

$test_path = ''

opt.on(
  '-t', '--test [PATH]',
  "compare the generated header to the header at PATH and exit " \
  + "(#{DEFAULT_HEADER_PATH} without PATH)"
) do |path|
  if path
    $test_path = path
  else
    $test_path = DEFAULT_HEADER_PATH
  end
end

opt.parse!

$hdr_source = VulkanUtilHeader.new(vk_xml_path).generate

if !$test_path.empty?
  require 'minitest/autorun'

  class TestVulkanUtilHeaderCoarse < MiniTest::Test
    def test_matches_existing_vulkan_util_header
      existing_hdr = File.open($test_path, &:read)
      assert_equal existing_hdr, $hdr_source
    end
  end
elsif !$write_path.empty?
  File.open($write_path, 'w') { _1.puts $hdr_source }
elsif $stdout_out
  puts $hdr_source
else
  begin
    IO.popen(ENV['PAGER'], 'w') { _1.puts $hdr_source }
  rescue Errno::EPIPE
  end
end

exit 0
