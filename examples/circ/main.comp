#version 460

const float TAU = 6.283185307179586;

writeonly uniform layout(set = 0, binding = 0) uimage2D disp_img;

layout(push_constant) uniform constants {
    float time;
} pcs;

float slope(vec2 a, vec2 b)
{
    return (b.y - a.y) / (b.x - a.x);
}

struct circ {
    vec2  center;
    float radius;
    float thickness;
    float blur;
    float point_dist_from_edge;
    vec3  color;
};

void circ_init(inout circ c, vec2 p)
{
    if (c.blur == 0.0) {
        c.blur = 0.00001;
    }

    c.point_dist_from_edge = distance(distance(c.center, p), c.radius);
}

bool within(circ c)
{
    return c.point_dist_from_edge <= c.thickness;
}

uvec4 color(circ c)
{
    float alpha = 1.0 - ((1.0 - exp(c.point_dist_from_edge*c.blur /
                                    c.thickness)) / (1.0 - exp(c.blur)));
    //float col_coef = alpha * ((sin(TAU * pcs.time * 0.5) + 1) / 2);
    return uvec4(round(c.color.zyx * alpha * 255), 255);
}

void draw(circ c)
{
    if (within(c)) {
        imageStore(disp_img, ivec2(gl_WorkGroupID.xy), color(c));
    }
}

struct line {
    vec2 start;
    vec2 end;
    float thickness;
};

bool within(line l, vec2 p)
{
    return distance(p.y - l.start.y, slope(l.start, l.end) * (p.x - l.start.x))
        <= l.thickness;
}

struct rect {
    vec2 center;
    vec2 dims;
};

bool within(rect d, vec2 p)
{
    //return distance(distance(p.x, d.corner.x), d.dims.x) <= d.thickness
    //       && distance(distance(p.y, d.corner.y), d.dims.y) <= d.thickness;

    return distance(p.x, d.center.x) <= d.dims.x
           && distance(p.y, d.center.y) <= d.dims.y;

    //return (distance(p.x, d.corner.x) <= d.dims.x
    //       && distance(p.y, d.corner.y) <= d.thickness)
    //       || (distance(p.y, d.corner.y) <= d.dims.y
    //          && distance(p.x, d.corner.x) <= d.thickness);
}

//const uvec3 circ_col     = uvec3(0, 255, 0);
const uvec4 knobs_bg_col = uvec4(70, 30, 100, 155);

void main()
{
    // the center of the rectangle as long and tall as the window, with (0,0)
    // being the top-left corner
    vec2 raw_center = gl_NumWorkGroups.xy / 2;

    // the normalized [-1,1]-on-each-axis point for this invocation
    vec2 p = ((vec2(gl_WorkGroupID.xy) - raw_center) / (gl_NumWorkGroups.xy /
                                                        2)) * vec2(1, -1);

    //circ c2 = circ(vec2(0), 0.4, 0.4, 20);
    //circ_init(c2);

    //circ c = circ_new(p, vec2(0), 0.8, 0.1, 3);

    circ face;
    face.center    = vec2(0);
    face.radius    = 0.4;
    face.thickness = 0.4;
    face.blur      = 0;
    face.color     = vec3(0, 0, ((sin(TAU * pcs.time * 0.6) + 1) / 2) * 0.6);
    circ_init(face, p);
    draw(face);

    //line marker = line(face.center, vec2(0.001, 1), 0.5);
    //if (within(marker, p)) {
    //    imageStore(disp_img, ivec2(gl_WorkGroupID.xy), knobs_bg_col);
    //}

    //rect d = rect(vec2(0.1, -0.8), vec2(0.9, 0.2), 0.1);
    rect d;
    d.center = face.center + vec2(0, face.radius/2 + face.thickness/4);
    d.dims   = vec2(0.02, face.radius);

    if (within(d, p)) {
        imageStore(disp_img, ivec2(gl_WorkGroupID.xy), knobs_bg_col);
    }

    circ outl;
    outl.center    = vec2(0);
    outl.radius    = 0.8;
    outl.thickness = 0.1;
    outl.blur      = -2;
    outl.color     = vec3(0, 1, 0);
    circ_init(outl, p);
    draw(outl);

    //line l = line(vec2(0, 0.1), vec2(1, -0.9), 0.1);

    //if (within(l, p)) {
    //    imageStore(disp_img, ivec2(gl_WorkGroupID.xy), knobs_bg_col);
    //}


    //vec2 center = vec2(0);
    //float dist = distance(p, center);

    //if (dist > 0.8 && dist <= 1.2) {
}
